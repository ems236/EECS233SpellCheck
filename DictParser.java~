import java.io.*;
import java.util.Scanner;
import java.util.ArrayList;

public class DictParser
{ 
  public static void main(String[] args) throws IOException
  {
    /*
    long startTime;
    
    //dict.txt contains all words on their own line in alphabetical order.
    
    Scanner dictText;
    
    //made an interface so this can be done in a loop
    Dict[] dicts = {new DictList(), new CharTree(), new StringHash(), new SearchableHash()};
    
    //build dictionaries
    for(int i = 0; i < dicts.length; i++)
    { 
      dictText = new Scanner(new File("dict.txt"));
      startTime = System.currentTimeMillis(); 
      //370099 words total
      while(dictText.hasNextLine())
      {
        String word = dictText.nextLine().toLowerCase();
        dicts[i].add(word);
      }
      dictText.close();
      System.out.println(System.currentTimeMillis() - startTime);
    }
    */
    
    /*
    //run time of add and delete
    //build every 5th word, then every 2/5 words, etc then delete everything
    //time is array[dict][N]
    long[][] addTimes = new long[4][5];
    long[][] deleteTimes = new long[4][5];
    
    for(int i = 1; i <= 5; i++)
    {
      //need to make this temp array to keep runtime of IO out of add tests.
      ArrayList<String> tempList = new ArrayList<String>();
      Scanner dictText = new Scanner(new File("dict.txt"));
      //370099 words total
      //build this way so that no bias in alphabetical position of words while testing
      int counter = 0;
      while(dictText.hasNextLine())
      {
        String word = dictText.nextLine().toLowerCase();
        if(counter < i)
        {
          tempList.add(word);
        }
        
        counter++;
        counter %= 5;
      }
      dictText.close();
      
      int[] addConstants = {1000, 100, 100, 100};
      int[] deleteConstants = {1, 100, 100, 100};
      Dict[] testDicts = {new DictList(), new CharTree(), new StringHash(), new SearchableHash()};
      
      for(int j = 0; j < testDicts.length; j++)
      { 
        long startTime = System.currentTimeMillis();
        for(int m = 0; m < addConstants[j]; m++)
        {
          //makes it an empty data structure
          testDicts[j] = blankDict(j);
          for(int k = 0; k < tempList.size(); k++)
          {
            testDicts[j].add(tempList.get(k));
          }
        }
        addTimes[j][i - 1] = System.currentTimeMillis() - startTime;
        
        //deletion
        startTime = System.currentTimeMillis();
        //need to pause timer to rebuild the dictionary
        long runTime = 0;
        for(int m = 0; m < deleteConstants[j]; m++)
        {
          runTime += System.currentTimeMillis() - startTime;
          //pause timer
          testDicts[j] = buildNSize(blankDict(j), i, 5);
          //resume timer
          startTime = System.currentTimeMillis();
          
          for(int k = 0; k < tempList.size(); k++)
          {
            testDicts[j].delete(tempList.get(k));
          }
        }
        deleteTimes[j][i - 1] = runTime + System.currentTimeMillis() - startTime;
      }
    }
    
    //print results
    System.out.println("Adding");
    for(int i = 0; i < deleteTimes.length; i++)
    {
      for(int j = 0; j < deleteTimes[i].length; j++)
      {
        System.out.println("Dict: " + i + ", N: " + j + " time: " + addTimes[i][j]);
      }
    }
    
    System.out.println("Deleting");
    for(int i = 0; i < deleteTimes.length; i++)
    {
      for(int j = 0; j < deleteTimes[i].length; j++)
      {
        System.out.println("Dict: " + i + ", N: " + j + " time: " + deleteTimes[i][j]);
      }
    }
    
    //run time of isWord 
    //use randomized list to get a good average.
    //generated some random words and some random strings to search.  Should be reasonable spread out lenghts and alphabetic positions.
    String[] testWords = 
    {
       "decade"
      , "cooperate"
      , "magnitude"
      , "contract"
      , "switch"
      , "throat"
      , "sausage"
      , "climate"
      , "berry"
      , "program"
      , "cotton"
      , "achievement"
      , "double"
      , "encourage"
      , "reform"
      , "ministry"
      , "talkative"
      , "unfortunate"
      , "transition"
    };
 
    System.out.println("Real words:");
    //5 linearly spaced dictionary sizes
    for(int i = 1; i < 6; i++)
    {
      Dict[] testDicts = buildNSize(new Dict[] {new DictList(), new CharTree(), new StringHash(), new SearchableHash()}, i, 5);
      
      //perform actual test
      for(int j = 0; j < testDicts.length; j++)
      {
        for(int k = 0; k < testWords.length; k++)
        {
          //makes sure all the test words in are there. will not significantly affect N. 
          testDicts[j].add(testWords[k]);
        }
        
        //search all test words a bunch of times, array is so much slower than the others so adjust
        int[] constants = {500, 10000000, 10000000, 10000000};
        
        long startTime2 = System.currentTimeMillis();
        for(int k = 0; k < constants[j]; k++)
        {
          for(int m = 0; m < testWords.length; m++)
          {
            testDicts[j].isWord(testWords[m]);
          }
        }
        long runTime = System.currentTimeMillis() - startTime2;
        System.out.println("Dict " + j + " N: " + i + " SearchTime: " + runTime);
      }
    }
      
    testWords = new String[] {
       "elmcayrbmu"
      , "qaxwhjy"
      , "rlzzoewhnyptqqpdjhie"
      , "ouip"
      , "drkperdxzhkilkfbbh"
      , "xinddolj"
      , "kltkwmb"
      , "lgqizw"
      , "ykvladsa" 
    };
    
    System.out.println("False words:");
    //test searching for words that aren't words
    for(int i = 1; i < 6; i++)
    {
      Dict[] testDicts = buildNSize(new Dict[] {new DictList(), new CharTree(), new StringHash(), new SearchableHash()}, i, 5);
      
      //perform actual test
      for(int j = 0; j < testDicts.length; j++)
      {
        //set up constants
        int[] constants = {1000, 100000000, 100000000, 100000000};
        
        long startTime2 = System.currentTimeMillis();
        for(int k = 0; k < constants[j]; k++)
        {
          for(int m = 0; m < testWords.length; m++)
          {
            testDicts[j].isWord(testWords[m]);
          }
        }
        long runTime = System.currentTimeMillis() - startTime2;
        System.out.println("Dict " + j + " N: " + i + " SearchTime: " + runTime);    
      }
    }
    
    
    String testWord = "spectrochemistry";
    System.out.println("Length dependence");
    //test dependence on word size using dicts[]
    for(int i = 1; i <= testWord.length(); i++)
    {
      //builds entire english dictionary
      //kind of wasteful to do the same thing every loop but I'd rather keep in in local scope
      Dict[] testDicts = buildNSize(new Dict[] {new DictList(), new CharTree(), new StringHash(), new SearchableHash()}, 1, 1);
      //perform actual test
      for(int j = 0; j < testDicts.length; j++)
      {    
        testDicts[j].add(testWord.substring(0, i));
        int[] constants = {1000, 100000000, 100000000, 100000000};
        
        long startTime2 = System.currentTimeMillis();
        for(int k = 0; k < constants[j]; k++)
        {
          testDicts[j].isWord(testWord.substring(0, i));
        }
        long runTime = System.currentTimeMillis() - startTime2;
        System.out.println("Dict " + j + " n: " + i + " SearchTime: " + runTime);
      }
    }
    */
    //autoCompleteTest
    //just substrings of the random used for isWord()
    String[] testWords = 
    new String[] 
    {
       "deca"
      , "coop"
     // , "ma"
      , "contrac"
      , "swit"
      , "thr"
      , "sausag"
      , "clima"
      , "berr"
      , "prog"
      , "cotto"
      , "achievem"
      , "doub"
      , "encour"
      , "re"
      , "m"
      , "talka"
      , "unfortun"
      , "transit"
    };
    
    String[] testWords2 = 
    {
       "decade"
      , "cooperate"
      , "magnitude"
      , "contract"
      , "switch"
      , "throat"
      , "sausage"
      , "climate"
      , "berry"
      , "program"
      , "cotton"
      , "achievement"
      , "double"
      , "encourage"
      , "reform"
      , "ministry"
      , "talkative"
      , "unfortunate"
      , "transition"
    };
  
    System.out.println("Autocomplete words:");
    //test autocomplete for partial words
    for(int i = 1; i < 6; i++)
    {
      Dict[] testDicts = buildNSize(new Dict[] {new DictList(), new CharTree(), new StringHash(), new SearchableHash()}, i, 5);
      
      //perform actual test
      for(int j = 3; j < testDicts.length; j++)
      {
        //mack sure words are actually in there
        for(int k = 0; k < testWords2.length; k++)
        {
          testDicts[j].add(testWords2[k]);
        }
        //set up constants
        int[] constants = {500, 1000000, 500, 1};
        
        long startTime2 = System.currentTimeMillis();
        for(int k = 0; k < constants[j]; k++)
        {
          for(int m = 0; m < testWords.length; m++)
          {
            System.out.println(testDicts[j].autoComplete(testWords[m]));
          }
        }
        long runTime = System.currentTimeMillis() - startTime2;
        System.out.println("Dict " + j + " N: " + i + " SearchTime: " + runTime);    
      }
    }
    
    /*
    testWords = 
    new String[] 
    {
       "deca"
      , "coop"
      , "ma"
      , "contrac"
      , "swit"
      , "thr"
      , "sausag"
      , "clima"
      , "berr"
      , "prog"
      , "cotto"
      , "achievem"
      , "doub"
      , "encour"
      , "re"
      , "m"
      , "talka"
      , "unfortun"
      , "transit"
    };
    System.out.println("Autocomplete non-words:");
    //test autocomplete for things that cannot be completed
    for(int i = 1; i < 6; i++)
    {
      Dict[] testDicts = buildNSize(new Dict[] {new DictList(), new CharTree(), new StringHash(), new SearchableHash()}, i, 5);
      
      //perform actual test
      for(int j = 0; j < testDicts.length; j++)
      {
        //set up constants
        int[] constants = {1000, 1000000, 1000000, 1000000};
        
        long startTime2 = System.currentTimeMillis();
        for(int k = 0; k < constants[j]; k++)
        {
          for(int m = 0; m < testWords.length; m++)
          {
            testDicts[j].autoComplete(testWords[m]);
          }
        }
        long runTime = System.currentTimeMillis() - startTime2;
        System.out.println("Dict " + j + " N: " + i + " SearchTime: " + runTime);    
      }
    }
    */
    
    /*
    //test of all methods, no runtime
    for(int i = 0; i < dicts.length; i++)
    {
      System.out.println("\r\n" + dicts[i].isWord("banana"));
      System.out.println(dicts[i].isWord("bananananansdwf"));
      System.out.println(dicts[i].isWord("abacax"));
      dicts[i].delete("banana");
      System.out.println(dicts[i].isWord("banana") + "\r\n");
      System.out.println(dicts[i].autoComplete("aal"));
      System.out.println(dicts[i].autoComplete("aals") + "\r\n");  
    }
    */
  }
  
  //builds a dictionary of some size N.  
  public static Dict[] buildNSize(Dict[] dicts, int iteration, int fraction) throws IOException
  {
    Scanner dictText;
    for(int i = 0; i < dicts.length; i++)
    { 
      dictText = new Scanner(new File("dict.txt"));
      //370099 words total
      //build this way so that no bias in alphabetical position of words while testing
      int counter = 0;
      while(dictText.hasNextLine())
      {
        String word = dictText.nextLine().toLowerCase();
        if(counter < iteration)
        {
          dicts[i].add(word);
        }
        
        counter++;
        counter %= fraction;
      }
      dictText.close();
    }
    
    return dicts;
  }
  
  //overload the method to allow using just one data structure. used in the delete loop
  //builds a single dictionary of some size N.  
  public static Dict buildNSize(Dict dict, int iteration, int fraction) throws IOException
  {
    Scanner dictText;
    dictText = new Scanner(new File("dict.txt"));
    //370099 words total
    //build this way so that no bias in alphabetical position of words while testing
    int counter = 0;
    while(dictText.hasNextLine())
    {
      String word = dictText.nextLine().toLowerCase();
      if(counter < iteration)
      {
        dict.add(word);
      }
        
      counter++;
      counter %= fraction;
    }
    dictText.close();
    
    return dict;
  }
  
  //used in the add loop
  public static Dict blankDict(int select)
  {
     Dict[] dicts = new Dict[] {new DictList(), new CharTree(), new StringHash(), new SearchableHash()};
     return dicts[select];
  }
}